{
  "version": 3,
  "sources": ["../src/server.ts", "../src/trpc.ts", "../src/routers/poolList.ts", "../src/utils/cosmwasmClient.ts", "../src/utils/helpers.ts", "../src/utils/queryRPC.ts", "../src/routers/token.ts", "../src/routers/tokenList.ts", "../src/routers/index.ts", "../src/config/context.ts", "../src/config/config.ts", "../src/index.ts"],
  "sourcesContent": ["import { fastifyTRPCPlugin } from \"@trpc/server/adapters/fastify\"\nimport fastify from \"fastify\"\nimport { appRouter } from \"./routers\"\nimport { createContext } from \"./config/context\"\nimport type { ServerOptions } from \"./config/types\"\n\nexport function createServer(opts: ServerOptions) {\n\tconst dev = opts.dev ?? true\n\tconst port = opts.port ?? 3000\n\tconst prefix = opts.prefix ?? \"/trpc\"\n\tconst server = fastify({ logger: dev })\n\n\tvoid server.register(fastifyTRPCPlugin, {\n\t\tprefix,\n\t\ttrpcOptions: { router: appRouter, createContext }\n\t})\n\n\tserver.get(\"/\", async () => {\n\t\treturn { hello: \"wait-on \uD83D\uDCA8\" }\n\t})\n\n\tconst stop = async () => {\n\t\tawait server.close()\n\t}\n\tconst start = async () => {\n\t\ttry {\n\t\t\tawait server.listen({ port })\n\t\t\tconsole.log(\"listening on port\", port)\n\t\t} catch (err) {\n\t\t\tserver.log.error(err)\n\t\t\tprocess.exit(1)\n\t\t}\n\t}\n\n\treturn { server, start, stop }\n}\n", "import { initTRPC } from \"@trpc/server\"\nimport superjson from \"superjson\"\nimport { Context } from \"./config/context\"\n\nconst t = initTRPC.context<Context>().create({\n\ttransformer: superjson,\n\terrorFormatter({ shape }) {\n\t\treturn shape\n\t}\n})\n\nexport const router = t.router\nexport const mergeRouters = t.mergeRouters\nexport const publicProcedure = t.procedure\n", "import { Decimal } from \"decimal.js\"\nimport type { Pool, Token } from \"../config/types\"\nimport { getCosmWasmClient } from \"../utils/cosmwasmClient\"\nimport { convertDenomToMicroDenom, convertMicroDenomToDenom } from \"../utils/helpers\"\nimport { queryRPC } from \"../utils/queryRPC\"\nimport { publicProcedure, router } from \"../trpc\"\n\nexport const poolListRouter = router({\n\tpoolList: publicProcedure.query(async () => {\n\t\tconst poolListResponse = await fetch(\n\t\t\t\"https://raw.githubusercontent.com/vexxvakan/hopers-tokenlist/main/poolList.json\"\n\t\t)\n\t\tconst poolListJson = await poolListResponse.json()\n\t\tconst poolList: Array<Pool> = poolListJson[\"pools\"].map((pool: Pool) => {\n\t\t\treturn pool\n\t\t})\n\n\t\tconst tokenListResponse = await fetch(\n\t\t\t\"https://raw.githubusercontent.com/vexxvakan/hopers-tokenlist/main/tokenList.json\"\n\t\t)\n\t\tconst tokenListJson = await tokenListResponse.json()\n\t\tconst tokenList = tokenListJson[\"tokens\"].map((token: Token) => {\n\t\t\treturn token\n\t\t})\n\n\t\tconst client = await getCosmWasmClient()\n\n\t\tconst poolQueries = poolList.map((pool) => {\n\t\t\treturn queryRPC(client, pool.swapAddress, { info: {} })\n\t\t})\n\n\t\tconst poolInfos = await Promise.all(poolQueries)\n\n\t\tconst hopersPrice = new Decimal(poolInfos[2].token2_reserve).dividedBy(\n\t\t\tnew Decimal(poolInfos[2].token1_reserve)\n\t\t)\n\n\t\tconst poolListWithData: Array<Pool> = poolInfos.map((poolInfo, index) => {\n\t\t\tconst token1: Token = tokenList.find((token: Token) => {\n\t\t\t\tif (Object.keys(poolInfo.token1_denom)[0] === \"cw20\") {\n\t\t\t\t\tif (Object.values(poolInfo.token1_denom)[0] === token.contractAddress) {\n\t\t\t\t\t\treturn token\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (Object.values(poolInfo.token1_denom)[0] === token.denom) {\n\t\t\t\t\t\treturn token\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\n\t\t\tconst token2: Token = tokenList.find((token: Token) => {\n\t\t\t\tif (Object.keys(poolInfo.token2_denom)[0] === \"cw20\") {\n\t\t\t\t\tif (Object.values(poolInfo.token2_denom)[0] === token.contractAddress) {\n\t\t\t\t\t\treturn token.decimal\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (Object.values(poolInfo.token2_denom)[0] === token.denom) {\n\t\t\t\t\t\treturn token.decimal\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\n\t\t\tconst token2ReserveDenom = new Decimal(poolInfo.token2_reserve).dividedBy(\n\t\t\t\tconvertDenomToMicroDenom(10, token2.decimal)\n\t\t\t)\n\n\t\t\tconst token1ReserveDenom = new Decimal(poolInfo.token1_reserve).dividedBy(\n\t\t\t\tconvertDenomToMicroDenom(10, token1.decimal)\n\t\t\t)\n\n\t\t\tconsole.log(index + 1, token2ReserveDenom.dividedBy(token1ReserveDenom).toFixed(24))\n\n\t\t\tconst decimalDiff = token2.decimal - token1.decimal\n\n\t\t\tconst token1Price =\n\t\t\t\ttoken1.denom === \"hopers\"\n\t\t\t\t\t? hopersPrice\n\t\t\t\t\t: new Decimal(\n\t\t\t\t\t\t\tnew Decimal(poolInfo.token1_reserve).dividedBy(\n\t\t\t\t\t\t\t\tnew Decimal(poolInfo.token2_reserve)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t  ).times(hopersPrice)\n\n\t\t\tconst token2Price = convertDenomToMicroDenom(\n\t\t\t\tnew Decimal(\n\t\t\t\t\tnew Decimal(poolInfo.token1_reserve).dividedBy(new Decimal(poolInfo.token2_reserve))\n\t\t\t\t).times(token1Price),\n\t\t\t\tdecimalDiff\n\t\t\t)\n\n\t\t\tconst poolWithData: Pool = {\n\t\t\t\tlpTokens: convertMicroDenomToDenom(poolInfo.lp_token_supply, 6),\n\t\t\t\tliquidity: {\n\t\t\t\t\ttoken1: {\n\t\t\t\t\t\tamount: new Decimal(poolInfo.token1_reserve),\n\t\t\t\t\t\ttokenPrice: token1Price,\n\t\t\t\t\t\tdenom: token1.denom\n\t\t\t\t\t},\n\t\t\t\t\ttoken2: {\n\t\t\t\t\t\tamount: new Decimal(poolInfo.token2_reserve),\n\t\t\t\t\t\ttokenPrice: token2Price,\n\t\t\t\t\t\tdenom: token2.denom\n\t\t\t\t\t},\n\t\t\t\t\tusd: 0\n\t\t\t\t},\n\t\t\t\tlpTokenAddress: poolInfo.lp_token_address,\n\t\t\t\tswapAddress: poolList[index].swapAddress,\n\t\t\t\tisVerified: poolList[index].isVerified,\n\t\t\t\tpoolId: index + 1,\n\t\t\t\tratio: token2ReserveDenom.dividedBy(token1ReserveDenom),\n\t\t\t\tbondingPeriods: []\n\t\t\t}\n\n\t\t\treturn poolWithData\n\t\t})\n\n\t\treturn poolListWithData\n\t})\n})\n", "import { CosmWasmClient } from \"@cosmjs/cosmwasm-stargate\"\n\nexport const getCosmWasmClient = async () => {\n\tconst client = await CosmWasmClient.connect(\"https://rpc.juno.basementnodes.ca\")\n\treturn client\n}\n", "import { Decimal } from \"decimal.js\"\n\nexport function convertMicroDenomToDenom(\n\tvalue: number | string | Decimal,\n\tdecimals: number\n): Decimal {\n\tif (decimals === 0) return new Decimal(value)\n\n\treturn new Decimal(Number(value) / Math.pow(10, decimals))\n}\n\nexport function convertDenomToMicroDenom(\n\tvalue: number | string | Decimal,\n\tdecimals: number\n): Decimal {\n\tif (decimals === 0) return new Decimal(value)\n\n\treturn new Decimal(String(Number(value) * Math.pow(10, decimals)))\n}\n", "import { CosmWasmClient } from \"@cosmjs/cosmwasm-stargate\"\n\nexport const queryRPC = async (\n\tclient: CosmWasmClient,\n\tcontractAddress: string,\n\tmessage: Record<string, any>\n) => {\n\ttry {\n\t\tconst result = await client.queryContractSmart(contractAddress, message)\n\t\treturn result\n\t} catch {\n\t\treturn null\n\t}\n}\n", "import type { Token } from \"../config/types\"\nimport { publicProcedure, router } from \"../trpc\"\n\nexport const tokenRouter = router({\n\ttokenBySymbol: publicProcedure.input(String).query(async ({ input }: { input: string }) => {\n\t\tconst tokenListResponse = await fetch(\n\t\t\t\"https://raw.githubusercontent.com/vexxvakan/hopers-tokenlist/main/tokenList.json\"\n\t\t)\n\t\tconst tokenList = await tokenListResponse.json()\n\t\tconst token = tokenList[\"tokens\"].find((token: Token) => token.symbol === input)\n\n\t\treturn token\n\t})\n})\n", "import { publicProcedure, router } from \"../trpc\"\n\nexport const tokenListRouter = router({\n\ttokenList: publicProcedure.query(async () => {\n\t\tconst tokenListResponse = await fetch(\n\t\t\t\"https://raw.githubusercontent.com/vexxvakan/hopers-tokenlist/main/tokenList.json\"\n\t\t)\n\t\tconst tokenList = await tokenListResponse.json()\n\t\treturn tokenList\n\t})\n})\n", "import { mergeRouters } from \"../trpc\"\nimport { poolListRouter } from \"./poolList\"\nimport { tokenRouter } from \"./token\"\nimport { tokenListRouter } from \"./tokenList\"\n\nexport const appRouter = mergeRouters(tokenRouter, tokenListRouter, poolListRouter)\nexport type AppRouter = typeof appRouter\n", "import { inferAsyncReturnType } from \"@trpc/server\"\nimport { CreateFastifyContextOptions } from \"@trpc/server/adapters/fastify\"\n\nexport function createContext({ req, res }: CreateFastifyContextOptions) {\n\tconst user = { name: req.headers.username ?? \"anonymous\" }\n\treturn { req, res, user }\n}\nexport type Context = inferAsyncReturnType<typeof createContext>\n", "import path from \"path\"\nimport { fileURLToPath } from \"url\"\nimport dotenv from \"dotenv\"\nimport type { ServerOptions } from \"./types\"\n\nconst { config } = dotenv\nconst __filename = fileURLToPath(import.meta.url)\nconst __dirname = path.dirname(__filename)\nconfig({ path: path.join(__dirname, \"../../env.local\") })\n\nconsole.log(process.env.DEV)\n\nexport const serverConfig: ServerOptions = {\n\tdev: process.env.DEV as unknown as boolean,\n\tport: 2022,\n\tprefix: \"/\"\n}\n", "import { createServer } from \"./server\"\nimport { serverConfig } from \"./config\"\n\nconst server = createServer(serverConfig)\nvoid server.start()\n"],
  "mappings": "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",
  "names": ["Decimal", "Decimal", "token", "server"]
}
